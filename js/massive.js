
// const friends = ['Mango', 'Kiwi', 'Poli', 'Ajax'];

// // for (let i = 0; i <= friends.length - 1; i += 1) {
// //     console.log(friends[i]);
// // }
// for (const friend of friends) {
//     console.log(friend);
// }



const cart = [54, 28, 105, 70, 92, 17, 120,12,96];
// –ø–µ—Ä–µ–±—Ä–∞—Ç—å –º–∞—Å—Å–∏–≤
// –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å–∏–≤–∞
// –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—Ç–∞–ª - –¥–æ —Ü–∏–∫–ª–∞
// –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç–æ—Ç–∞–ª

// let total = 0;
// for (let i = 0; i < cart.length; i += 1) {
//     total += cart[i];
// }
    
// for (value of cart) {
//     total += value;
// }
// console.log(total);

// for (let i = 0; i < cart.length; i += 1) {
//     cart[i] = Math.round( cart[i] * 1.1)
// }


// console.log(cart);


// Task 3
// —Å–ª–æ–∂–∏—Ç—å –≤—Å–µ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ

// const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 11];

// —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –≤ –∫–æ—Ç–æ—Ä—É—é —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤—Å–µ —á–∏—Å–ª–∞
// –ø–µ—Ä–µ–±—Ä–∞—Ç—å –º–∞—Å—Å–∏–≤
// –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —á–µ—Ç–Ω–æ—Å—Ç—å
// –µ—Å–ª–∏ —á–µ—Ç–Ω—ã–π - –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–æ—Ç–∞–ª

// let total = 0;

// for (let i = 0; i < numbers.length; i += 1) {
//     console.log(numbers[i]);
//     if (numbers[i] % 2 === 0) {
//         console.log("x–µ—Ç–Ω–æ–µ!!!");
//         total += numbers[i];
//     }
// }

// for (number of numbers) {
//     if (number % 2 === 0) {
//         total += number;
//     }
// }
// console.log(total);


// Task 4

// const logins = ['m4ngoDoge', 'k1widab3st', 'poly1scute', 'aj4xth3m4n'];
// const loginToFind = 'aj4xth3m4n';

// let message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω.`;


// for (let i = 0; i < logins.length; i += 1) {
//     const login = logins[i];
//     if (login === loginToFind) {
//         message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω.`;
//         break
//     } else {
//         message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
//     }
//    }

// for (const login of logins) {
//     if (login === loginToFind) {
// message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω.`;
//         break;
//     }
// }
// console.log(message);


// console.log(logins.includes(loginToFind));


// const message = logins.includes(loginToFind)
//   ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω.`
//   : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω.`;

//   console.log(message);

// Task 5

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ,
 * –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ —á–∏—Å–ª–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è).
 */

// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let smaliesNumber = numbers[0];
// for (const number of numbers) {
    
//     if (number < smaliesNumber) {
//         smaliesNumber = number;
//     }
// }

// console.log(smaliesNumber);


// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let biggestNumber = numbers[0];
// for (const number of numbers) {
//     if (number > biggestNumber) {
//         biggestNumber = number;
//     }
// }
// console.log(biggestNumber);


// Task 6
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –æ–¥–Ω–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
//   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ.
//   –ü—É—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞  –≤ —Å—Ç—Ä–æ–∫–µ –±—É–¥—É—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç–æ–π.

// const friends = ['Mango', 'Poly', 'Kiwi', 'Ajax'];
// // let string = '';
// // for (const friend of friends) {
// //     string += friend + ', ';
// // }
// // string = string.slice(0, string.length - 2);
// // console.log(string);
// const string = friends.join(', ');
// console.log(string);


// Task 7

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π.
 * –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ¬´JavaScript¬ª, —Ç–æ –Ω–∞ –≤—ã—Ö–æ–¥–µ –¥–æ–ª–∂–µ–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞ ¬´jAVAsCRIPT¬ª.
 */

// const string = 'JavaScript';
// const letters = string.split('');

// let invertedStr = '';
// for (const letter of letters) {
//     if (letter === letter.toLowerCase()) {
        
//         invertedStr += letter.toUpperCase();
//     } else {
//         invertedStr += letter.toLowerCase();
//     }
//     console.log(letter);
// }

// for (const letter of letters) {
//     invertedStr +=
//         letter === letter.toLowerCase() ? letter.toUpperCase() : letter.toLowerCase()
// }

// console.log(invertedStr);


// Task 8

/*
 * –î–µ–ª–∞–µ–º slug –≤ URL –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞ dev.to)
 * –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
 *
 * - –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
 * - –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
 * - –°—à–∏–≤–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
 */

// –î–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è top-10-benefits-of-react-framework
// const title = 'Top 10 benefits of React framework';

// const normTitle = title.toLowerCase().split(' ');
// const slugStr = normTitle.join('-');

// const slug = title.toLowerCase().split(' ').join('-')
// console.log(slugStr);
// console.log(slug);

// Task 9
/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤.
 */

// const array1 = [5, 10, 15, 20];
// const array2 = [10, 20, 30];

// const numbers = array1.concat(array2);
// let total = 0;

// // for (let i = 0; i < numbers.length; i += 1) {
// //     console.log(numbers[i]);
// //     total += numbers[i];
// // }

// for (const number of numbers) {
//     total += number;
// }

// console.log(total);

// Task 10
/*
 * –†–∞–±–æ—Ç–µ–º —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ trello
 * - –ú–µ—Ç–æ–¥ splice()
 * - –£–¥–∞–ª–∏—Ç—å
 * - –î–æ–±–∞–≤–∏—Ç—å
 * - –û–±–Ω–æ–≤–∏—Ç—å
 */

// const cards = [
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-1',
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-2',
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-3',
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-4',
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-5',
// ];
// const cardToRemove = '–ö–∞—Ä—Ç–æ—á–∫–∞-3';
// const index = cards.indexOf(cardToRemove);


// console.table(cards)
// console.log(index);
// cards.splice(index, 3);

// console.table(cards);

/*
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É)
 */

// const cardToInsert = '–ö–∞—Ä—Ç–æ—á–∫–∞-6';
// const index = 5;
// cards.splice(index,0, cardToInsert);
// console.table(cards);

/*
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É)
 */


// const cardToUpdate = '–ö–∞—Ä—Ç–æ—á–∫–∞-4';


// // const index = cards.indexOf(cardToUpdate);

// const index = cards.indexOf(cardToUpdate);
// console.log(index)
// cards.splice(index,1,"updatecard")

// console.table(cards);



// Task 11

//  –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ Jazz —ñ Blues.
// –î–æ–¥–∞–π—Ç–µ "Rock'n'roll" –≤ –∫—ñ–Ω–µ—Ü—å.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.
// –ú–µ—Ç–æ–¥–∏ push unshift shift splice

// const genres = ["Jazz", "Blues","Rock'n'roll"];
// genres.push("Rock'n'roll");

// console.log(genres[0]);

// const lastEl = genres[genres.length - 1];
// console.log(lastEl);

// const deletFstEl = genres.shift();
// console.log(deletFstEl);

// genres.unshift('Country', 'Reggae');
// console.log(genres);


// genres.splice(0, 0, 'Country', 'Reggae');

// console.log(genres);



// Task 12 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –∑–º—ñ–Ω–Ω—ñ–π –≤–µ–ª–∏—á–∏–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
// –ú–µ—Ç–æ–¥ split

// const value = '8 11';
// const arr = value.split(' ');
// const firstValue = Number(arr[0]);
// // const secondValue = arr[1];
// const lastValue = arr[arr.length - 1];

// console.log(firstValue *lastValue);


// Task 13 –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –ø–µ—Ä—à–æ–≥–æ.

const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];


// for (let i = 0; i < fruits.length; i += 1) {
//     console.log(`–ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä ${i+1}`,fruits[i]);
// }

// for (let i = 0, num = 1; i < fruits.length; i += 1, num += 1) {
//     console.log(`–ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä ${num}`, fruits[i]);
// }

// Task 14
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –∑–º—ñ–Ω–Ω–∏—Ö names —ñ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// –ú–µ—Ç–æ–¥ split

// const names = 'Jacob,William,Solomon,Kate';
// const phones = '38001234567,38001112233,380055566377,38099912233';
// const arrNames = names.split(',');

// const arrPhones = phones.split(',');
// for (let i = 0; i < arrNames.length, i< arrPhones.length; i += 1) {
//     console.log(arrNames[i],'-', arrPhones[i]);
// }

// Task 15  –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ–±—ñ–ª–æ–º. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.
// –º–µ—Ç–æ–¥–∏ splice pop shift

// const string = 'Welcome to the future';
// const words = string.split(' ');
// words.shift();
// words.pop();
// const str = words.join(' ');
// console.log(str);

// const words = string.split(' ');
// words.splice(0, 1);
// console.log(words);

// Task 16  –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≤–µ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Ä—è–¥–æ–∫ –ª—ñ—Ç–µ—Ä) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –ú–µ—Ç–æ–¥–∏ split reverse join

// const string = 'Welcome to the future';
// const arr = string.split('');
// console.log(arr);
// const rev = arr.reverse();
// console.log(rev);
// const str = rev.join('');
// console.log(str);

// const result = string.split('').reverse().join('');
// console.log(result);



// Task 17 –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.

// const numbers = [101, 78, 12, 76, 5, 11, 9];

// let min = numbers[0];
// for (const number of numbers) { 
    
//     if (number < min) { 
//         min = number;
//     }
// }
// console.log(min);
